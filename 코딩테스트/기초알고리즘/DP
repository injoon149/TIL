## 동적 계획법 - memoization (탑다운 방식)
  - 값을 기록하고, 그 기록한 값을 찹조하는 것.
    int fibbo(int n) {
      if(memo[n] != -1) return memo[n];
      if(n <= 2) memo[n] = 1;
      else memo[n] = fibbo(n-1) + fibbo(n-2);
      return memo[n];
  }

## 동적 계획법 - tabulation (바텀 업 방식)
  - 순서대로 배열에 값을 채워 나가는 방식
  int dp[MAX_N] = {};
  dp[1] = 1; dp[2] = 1;
  for(int i = 3; i<=n; i++) dp[i] = dp[i-1] + dp[i-2];
  cout << dp[n];
## 격자 안에서 한 칸씩 전진하는 dp
  - 마지막으로 방문한 위치가 같다면, 이동한 경로 상의 숫자 합은 클수록 더 좋다.
  - dp[i][j]는, 마지막으로 방문한 위치를 (i, j)라 했을 때, 얻을 수 있는 최대 합
  - dp[i][j] = max(dp[i-1][j] + a[i][j], dp[i-1][j-1] + a[i][j])
## 조건에 맞게 선택적으로 전진하는 dp
  - 점프를 진행하다가 현재 마지막으로 도착한 위치가 같다면, 지금까지의 점프 횟수가 더 많을수록 좋다.
  - dp[i] : 점프하여 도착한 마지막 위치를 i라 했을 때, 가능한 최대 점프 횟수
    
