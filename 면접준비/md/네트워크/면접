## JVM의 역할
- 스택 기반으로 동작하며, JAVA 바이트 코드를 OS에 맞게 해석해주는 역할을 하고, 가비지 컬렉션을 통해 자동적인 메모리 관리를 해 준다.

## 추상클래스와 인터페이스
- 추상 클래스는 클래스 내 추상 메서드가 하나 이상 포함되거나 abstract로 정의된 경우, 인터페이스는 모든 메서드가 추상 메서드로만 이루어진 것을
  말한다.
- 공통점 : new 연산자로 인스턴스 생성이 불가하다.
- 차이점 : 인터페이스는 그 인터페이스를 상속받는 모든 클래스에 대해 특정한 메서드가 반드시 존재해야 하고, 추상 클래스는 상속받는 클래스들의 
공통적인 로직을 추상화시키고, 기능 확장을 위해 사용한다.

## 가비지 컬렉션
- JVM의 메모리 관리 기법 중 하나로, 시스템에서 동적으로 할당된 메모리 영역 중에서 필요없어진 메모리 영역을 회수하여 메모리를 관리해 주는
  기법이다.

## CheckedException 과 UnCheckedExpection의 차이
- CheckedExpection은 실행하기 전에 예측 가능한 예외를 말하고, 반드시 예외 처리를 해야 한다. ex) IOException
- UnCheckedExpection은 실행하고 난 후 알 수 있는 예외, 따로 예외 처리를 하지 않아도 된다. ex) NullPointerExpection
- RuntimeException은 UncheckedException을 상속한 클래스이다.

## JPA 장점
- sql문이 아닌 메서드를 통해 DB를 조작할 수 있어, 개발자는 비즈니스 로직을 구성하는 데에만 집중할 수 있다.
- 자동으로 처리되는 부분이 많아 변경이 일어날 때 손쉽게 바꿀 수 있다.
- 패러다임의 불일치 해결 : Java에서는 상속관계가 존재하는데 데이터베이스에서는 객체의 상속 관계를 지원하지 않아 생기는 문제점을 해결하였다.

## OAuth 2.0
1. 사용자가 클라이언트에 접근하고, 동의를 누르면 구글에 인증을 요청한다.
2. 구글은 인증 코드를 반환하고, 구글에 웹 사이트 등록 시 받은 client ID, client secret, 인증 코드를 구글에 요청한다.
3. 올바른 요청일 경우 구글은 클라이언트에 access token을 발급, 이를 통해 클라이언트는 로그인된 사용자 정보에 접근 가능하다.
- 장점 : 교환을 할 때 secret key가 필요하고, secret key는 백엔드에서만 교환이 이루어지기 때문에 탈취의 가능성이 없다.
