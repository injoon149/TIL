## JSR-330 Provider
- jakarta.inject.provider => 항상 새로운 프로토타입 빈을 출력하는 방법
- provider.get()을 통해서 항상 새로운 프로토타입 빈이 생성된다.
- get() 메서드 하나로 기능이 단순하고, 자바 표준이므로 스프링이 아닌 다른 컨테이너에서도 사용할 수 있다.
  @Autowired
  private Provider<PrototypeBean> provider;
  public int logic() {
    PrototypeBean prototypeBean = provider.get();
    prototypeBean.addCount();
    int count = prototypeBean.getcount();
    return count;
  }

## 웹 스코프
- 웹 환경에서만 동작하고, 스프링이 해당 스코프의 종료 시점까지 관리하며, 종료 메서드가 호출된다.

## 웹 스코프의 종류
1. request : HTTP 요청 하나가 들어오고 나갈 때까지 유지되는 스코프. 각 요청마다 별도의 빈 인스턴스가 생성되고, 관리된다.
2. session : HTTP 세션과 동일한 생명 주기를 가지는 스코프
3. application : 서블릿 컨텍스트와 동일한 생명 주기
4. websocket

## request 스코프
- @Scope(value = "request")를 통해서 request 스코프로 클래스를 지정한다.
- HTTP 요청 당 하나씩 빈이 생성되고, 요청이 끝나면 소멸한다.

## 서블릿 컨텍스트
- 서블릿과 서블릿 컨테이너(WAS)가 통신하기 위해 사용하는 메서드를 지원하는 인터페이스
- 웹 애플리케이션 내에 있는 모든 서블릿을 관리하며, 정보 공유할 수 있게 도와준다.

## 서버가 http 요청을 받고 다시 http로 결과를 응답하기까지의 과정
1. DispatcherServlet(Front Controller)의 HTTP 요청 접수
2. DispatcherServlet은 url, 파라미터 정보 등을 참고로 하여 어떤 컨트롤러에게 작업을 위임할지 결정 => 핸들러 매핑 전략
3. 컨트롤러의 모델 생성과 정보 등록
4. 컨트롤러가 뷰의 논리적인 이름을 리턴하고, 뷰 리졸버가 이를 이용해 뷰 오브젝트를 생성한다.
  - 뷰 오브젝트 + 뷰 템플릿 => HTML
5. DispatcherServlet이 컨트롤러에게 모델과 뷰를 받은 뒤에 뷰 오브젝트에게 모델을 전달해 주고, 최종 결과물을 요청한다.
6. HTTP 응답 돌려주기

## 데이터베이스 커넥션 풀
- 미리 연결을 해 두고 재활용. 고객 요청이 올 때 이미 연결해 놓은 데이터베이스 커넥션을 재활용한다.

## 스코프와 프록시
@Component
@Scope(value = "request", proxyMode = scopedProxyMode.Target_class)
public class MyLogger {}
-> 적용 대상이 클래스면 Target_class 선택, 인터페이스면 Interfaces 선택
- MyLogger의 가짜 프록시 클래스를 만들어 두고, HTTP Request와 상관없이 가짜 프록시 클래스를 다른 빈에 미리 주입해 둘 수 있다.
- Scope의 proxyMode를 사용하면, 스프링 컨테이너는 cglib이라는, 바이트코드를 조작하는 라이브러리를 사용해서, MyLogger를 상속받은 가짜 프록시
객체를 생성한다.

프록시 동작 과정
- 가짜 프록시 객체는 요청이 오면 그때 내부에서 진짜 빈을 찾는 위임 로직이 들어 있다.
- 클라이언트가 MyLogger.log() 호출 => 가짜 프록시 객체의 메소드를 호출한 것.
- 가짜 프록시 객체는 request 스코프의 진짜 myLogger.log() 호출한다.

동작 정리
1. cglib이라는 라이브러리로 내 클래스를 상속받은 가짜 프록시 객체를 만들어서 주입한다.
2. 가짜 프록시 객체는 실제 요청이 오면 그때 내부에서 실제 빈을 요청하는 위임 로직이 들어 있다.

프록시 객체의 장점
1. 진짜 객체 조회를 꼭 필요한 시점까지 지연처리할 수 있다.
2. 애노테이션 설정 변경만으로 원본 객체를 프록시 객체로 대체할 수 있다.
3. 웹 스코프가 아니어도 프록시는 사용할 수 있다.













